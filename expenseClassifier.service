const pool = require('../../config/database');
const natural = require('natural');
const brain = require('brain.js');
const nlp = require('compromise');

class ExpenseClassifier {
  constructor() {
    this.nlp = nlp; 
    this.initializeClassifiers();
    this.trainingData = [];
    this.initializeWithBasicData(); 
  }

  initializeClassifiers() {
    this.keywordClassifier = new natural.BayesClassifier();
    
    this.neuralClassifier = new brain.NeuralNetwork({
      binaryThresh: 0.5,
      hiddenLayers: [10, 7], // Added an extra layer
      activation: 'leaky-relu', // Better for this task
      leakyReluAlpha: 0.01,
      inputSize: 7,
      outputSize: 7
    });
    
    this.trainingData = [];
  }

  initializeWithBasicData() {
    const enhancedTrainingData = {
      Food: {
        examples: ["burger", "pizza", "pasta"],
        nouns: ["meal", "food", "dinner"],
        verbs: ["eat", "dine"]
      },
      Bill: {
        examples: ["electric bill", "water payment"],
        nouns: ["utility", "rent"],
        verbs: ["pay", "owe"]
      },
      Transportation: {
        examples: ["bus fare", "gas", "train ticket"],
        nouns: ["transport", "fare"],
        verbs: ["ride", "travel"]
      },
      Entertainment: {
        examples: ["movie", "concert", "game"],
        nouns: ["fun", "show"],
        verbs: ["watch", "play"]
      },
      Healthcare: {
        examples: ["doctor", "hospital", "medicine"],
        nouns: ["health", "clinic"],
        verbs: ["treat", "heal"]
      },
      Shopping: {
        examples: ["clothes", "shoes", "mall"],
        nouns: ["purchase", "item"],
        verbs: ["buy", "shop"]
      },
      Other: {
        examples: ["miscellaneous", "unknown"],
        nouns: ["other"],
        verbs: []
      }
    };
    Object.entries(enhancedTrainingData).forEach(([category, data]) => {
      // Train on direct examples
      data.examples.forEach(text => this.addTrainingExample(text, category));
      
      // Train on related nouns/verbs
      data.nouns.forEach(noun => this.addTrainingExample(noun, category));
      data.verbs.forEach(verb => this.addTrainingExample(verb, category));
    });
    
    this.train();
  }

  textToFeatures(text) {
    const doc = this.nlp(text);
    const words = text.split(/\s+/);
    
    return [
      Math.min(text.length / 100, 1), // Normalized length
      /\d/.test(text) ? 1 : 0, // Has numbers
      Math.min(words.length / 10, 1), // Word count
      Math.min(doc.nouns().out('array').length / 5, 1),
      Math.min(doc.verbs().out('array').length / 5, 1),
      Math.min(doc.adjectives().out('array').length / 5, 1),
      text.endsWith('?') ? 1 : 0
    ];
  }

  addLinguisticVariants(text, category) {
    const doc = this.nlp(text);
    
    // 1. Add singular/plural forms
    const singular = doc.nouns().toSingular().text();
    if (singular !== text) {
      this.keywordClassifier.addDocument(singular, category);
    }
    
    // 2. Add verb forms (e.g. "paying bill" -> "pay bill")
    const baseVerbs = doc.verbs().toInfinitive().text();
    if (baseVerbs !== text) {
      this.keywordClassifier.addDocument(baseVerbs, category);
    }
    
    // 3. Add money-related expansions
    if (doc.has('#Money')) {
      this.keywordClassifier.addDocument('payment', category);
    }
  }

  addCommonFoodMisspellings(baseWord) {
    if (baseWord.includes('burger')) {
      this.addTrainingExample('burgei', 'Food');
      this.addTrainingExample('burgir', 'Food');
    }
    if (baseWord.includes('pizza')) {
      this.addTrainingExample('piza', 'Food');
      this.addTrainingExample('pisa', 'Food');
    }
  }

  fuzzyMatch(input, target, threshold = 0.7) {
    const distance = natural.LevenshteinDistance(input, target);
    const similarity = 1 - (distance / Math.max(input.length, target.length));
    return similarity >= threshold;
  }

  addTrainingExample(text, category) {
    const normalized = text.toLowerCase().trim();
    
    this.keywordClassifier.addDocument(normalized, category);
    
    this.trainingData.push({
      input: this.textToFeatures(normalized),
      output: category // Just use the category name directly
    });

    this.addLinguisticVariants(normalized, category);
  }

  

  async simpleLearn(itemName, expenseType) {
    try {
      const normalizedText = itemName.toLowerCase().trim();

      this.keywordClassifier.addDocument(normalizedText, expenseType);
      
      const features = this.textToFeatures(normalizedText);
    this.trainingData.push({
      input: features,
      output: { [expenseType]: 1 }
    });
      
      await this.keywordClassifier.retrain();
      if (this.trainingData.length % 5 === 0) {
        await this.neuralClassifier.train(this.trainingData, {
          iterations: 1000,
          errorThresh: 0.01,
          log: false
        });
      }
      return true;
    } catch (error) {
      console.error('Error in learning:', {
        error: error.message,
        text: itemName,        
        category: expenseType, 
        stack: error.stack
      });
      throw error;
    }
  }

  async learn(text, correctCategory) {
    return this.simpleLearn(text, correctCategory);
  }
  
  async loadTrainingData() {
    try {
      const [expenses] = await pool.execute(
        "SELECT LOWER(item_name) as item_name, expense_type FROM expenses LIMIT 1000"
      );
      
      console.log(`Loaded ${expenses.length} training examples`);

      if (expenses.length === 0) {
        console.warn('Warning: No training data loaded from database');
        return;
      }

      const categoryCounts = {};
      expenses.forEach(expense => {
        this.addTrainingExample(expense.item_name, expense.expense_type);
        categoryCounts[expense.expense_type] = (categoryCounts[expense.expense_type] || 0) + 1;
      });

      const categoryExamples = {
        Food: [
          "burger", "burgei", "burgir", "hamburger", "jollibee", 
          "pizza", "piza", "pasta", "sandwich", "fries", "milktea",
          "rice", "noodles", "chicken", "mcdo", "kfc"
        ],
        Bill: [
          "electric bill", "water bill", "internet bill", "phone bill",
          "cable bill", "utility bill", "rent", "mortgage", "electricity",
          "water payment", "internet payment"
        ],
        Transportation: [
          "gasoline", "gas", "petrol", "diesel", "jeepney fare",
          "bus fare", "mrt fare", "grab", "angkas", "taxi",
          "lrt fare", "tricycle fare", "parking fee", "car maintenance"
        ],
        Entertainment: [
          "movie tickets", "netflix", "spotify", "youtube premium",
          "concert tickets", "videoke", "arcade", "theme park",
          "movie", "cinema", "streaming", "game", "video game"
        ],
        Healthcare: [
          "doctor visit", "hospital", "medicine", "vitamins",
          "checkup", "dentist", "vaccine", "medical supplies",
          "pharmacy", "drugstore", "clinic", "xray", "laboratory"
        ],
        Shopping: [
          'shoes', 'clothes', 'shirt', 'pants', 'dress',
          'gadget', 'phone', 'laptop', 'accessories', 'bag',
          'watch', 'perfume', 'makeup', 'groceries', 'market',
          'office chair', 'desk', 'monitor', 'keyboard', 'mouse',
          'furniture', 'stationery', 'notebook', 'pen', 'backpack'
        ],
        Other: [
          "miscellaneous", "unknown", "uncategorized"
        ]
      };

      const targetCount = Math.max(...Object.values(categoryCounts)) || 10;
      for (const [category, examples] of Object.entries(categoryExamples)) {
        examples.forEach(text => {
          if ((categoryCounts[category] || 0) < targetCount) {
            this.addTrainingExample(text, category);
            categoryCounts[category] = (categoryCounts[category] || 0) + 1;
          }
        });
      }
      
      await this.train();
    } catch (error) {
      console.error('Error loading training data:', error);
    }
  }


  async train() {
  this.keywordClassifier.train();
  
  if (this.trainingData.length > 0) {
    try {
      const trainingOptions = {
        iterations: 500, // Reduced from 2000
        errorThresh: 0.01,
        log: true,
        learningRate: 0.5, // Increased learning rate
        momentum: 0.3,
        timeout: 10000 // Stop after 10 seconds
      };
      
      await this.neuralClassifier.train(this.prepareTrainingData(), trainingOptions);
    } catch (err) {
      console.error('Training failed:', err);
    }
  }
}

prepareTrainingData() {
  const categories = ['Food', 'Bill', 'Transportation', 'Entertainment', 'Healthcare', 'Shopping', 'Other'];
  return this.trainingData.map(item => {
    const output = {};
    categories.forEach(cat => {
      output[cat] = item.output === cat ? 0.99 : 0.01; // Better contrast
    });
    return {
      input: item.input,
      output: output
    };
  });
}

  async predict(text, userPatterns = null) {  
    try {
      if (!text || typeof text !== 'string' || text.trim().length === 0) {
        return 'Other';
      }

      const lowerText = text.toLowerCase().trim();
      const words = lowerText.split(/\s+/);

      if (userPatterns && userPatterns[lowerText]) {
        return userPatterns[lowerText];
      }

      const categoryKeywords = {
        Food: [
          "burger", "burgei", "burgir", "hamburger", "jollibee", 
          "pizza", "piza", "pasta", "sandwich", "fries", "milktea",
          "rice", "noodles", "chicken", "mcdo", "kfc"
        ],
        Bill: [
          "electric bill", "water bill", "internet bill", "phone bill",
          "cable bill", "utility bill", "rent", "mortgage", "electricity",
          "water payment", "internet payment"
        ],
        Transportation: [
          "gasoline", "gas", "petrol", "diesel", "jeepney fare",
          "bus fare", "mrt fare", "grab", "angkas", "taxi",
          "lrt fare", "tricycle fare", "parking fee", "car maintenance"
        ],
        Entertainment: [
          "movie tickets", "netflix", "spotify", "youtube premium",
          "concert tickets", "videoke", "arcade", "theme park",
          "movie", "cinema", "streaming", "game", "video game"
        ],
        Healthcare: [
          "doctor visit", "hospital", "medicine", "vitamins",
          "checkup", "dentist", "vaccine", "medical supplies",
          "pharmacy", "drugstore", "clinic", "xray", "laboratory"
        ],
        Shopping: [
          'shoes', 'clothes', 'shirt', 'pants', 'dress',
          'gadget', 'phone', 'laptop', 'accessories', 'bag',
          'watch', 'perfume', 'makeup', 'groceries', 'market',
          'office chair', 'desk', 'monitor', 'keyboard', 'mouse',
          'furniture', 'stationery', 'notebook', 'pen', 'backpack'
        ]
      };
      

      for (const [category, keywords] of Object.entries(categoryKeywords)) {
        if (keywords.some(keyword => 
          keyword.includes(' ') ? 
            lowerText.includes(keyword) : 
            words.includes(keyword)
        )) {
          return category;
        }
      }

      const keywordCategory = this.keywordClassifier.classify(lowerText);
      if (keywordCategory && keywordCategory !== 'Other') {
        const probs = this.keywordClassifier.getClassifications(lowerText);
        if (probs[0].value > 0.6) return keywordCategory;
      }
  
      const neuralResult = this.neuralClassifier.run(this.textToFeatures(lowerText));
      if (neuralResult) {
        const neuralCategory = Object.keys(neuralResult)[0];
        if (neuralCategory && neuralCategory !== 'Other') {
          return neuralCategory;
        }
      }
  
      return 'Other';
    } catch (error) {
      console.error('Prediction error:', error);
      return 'Other';
    }
  }
  }


module.exports = new ExpenseClassifier();

const expenseService = require('../expenses/expenses.service');


module.exports = {
    predictCategory: async (req, res) => {
      try {
        const { item_name } = req.body;
        const userId = req.user.userId;
        
        if (!item_name) {
          return res.status(400).json({ 
            success: 0,
            message: 'Item name is required' 
          });
        }
        
        const expense_type = await expenseService.predictExpenseCategory(item_name, userId);
        
        res.json({ 
          success: 1,
          data: { expense_type } 
        });
        
      } catch (error) {
        console.error('Prediction error:', error);
        res.status(500).json({ 
          success: 0,
          message: 'Failed to predict category' 
        });
      }
    },
  
    learnFromCorrection: async (req, res) => {
      try {
        console.log('Full incoming request:', {
          body: req.body,
          headers: req.headers,
          user: req.user
        });
    
        const { item_name, expense_type, item_price, personal_budget_id } = req.body;
        const userId = req.user?.userId || null; // Make userId optional for learning
    
        if (!item_name || !expense_type) {
          console.error('Missing required fields:', { item_name, expense_type });
          return res.status(400).json({ 
            success: 0,
            message: 'Both item_name and expense_type are required' 
          });
        }
        
        const result = await expenseService.learnFromCorrection(
          item_name,
          expense_type,
          userId,
          item_price,
          personal_budget_id
        );
        
        return res.json({ 
          success: 1,
          message: 'Learned from correction',
          data: result 
        });
        
      } catch (error) {
        console.error('Full learning error:', {
          message: error.message,
          stack: error.stack,
          response: error.response?.data,
          request: {
            body: req.body,
            headers: req.headers
          }
        });
        
        return res.status(500).json({ 
          success: 0,
          message: 'Failed to learn from correction',
          error: process.env.NODE_ENV === 'development' ? {
            message: error.message,
            stack: error.stack
          } : undefined
        });
      }
    }
  };

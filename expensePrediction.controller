const expenseService = require('../expenses/expenses.service');


module.exports = {
    predictCategory: async (req, res) => {
      try {
        const { item_name } = req.body;
        const userId = req.user.userId;
        
        if (!item_name) {
          return res.status(400).json({ 
            success: 0,
            message: 'Item name is required' 
          });
        }
        
        const expense_type = await expenseService.predictExpenseCategory(item_name, userId);
        
        res.json({ 
          success: 1,
          data: { expense_type } 
        });
        
      } catch (error) {
        console.error('Prediction error:', error);
        res.status(500).json({ 
          success: 0,
          message: 'Failed to predict category' 
        });
      }
    },
  
    learnFromCorrection: async (req, res) => {
      try {
        console.log('Incoming learning data:', req.body);

        const { item_name, expense_type, item_price, personal_budget_id } = req.body;
        const userId = req.user.userId;

        if (!item_name || !expense_type) {
          console.error('Missing required fields:', { item_name, expense_type });
            return res.status(400).json({ 
              success: 0,
              message: 'Both item_name and expense_type are required' 
            });
          }
          

          const validTypes = ['Food', 'Bill', 'Transportation', 'Entertainment', 'Healthcare', 'Shopping', 'Other'];
          if (!validTypes.includes(expense_type)) {
            console.error('Invalid expense type:', expense_type);
            return res.status(400).json({
              success: 0,
              message: `Invalid expense type. Must be one of: ${validTypes.join(', ')}`
            });
          }
        
    await expenseService.learnFromCorrection(
      item_name,
      expense_type,
      userId,
      item_price,
      personal_budget_id
    );
    
    console.log('Learning data saved successfully')
        res.json({ 
          success: 1,
          message: 'Learned from correction' 
        });
        
      } catch (error) {
        console.error('Learning error:', error);
        res.status(500).json({ 
          success: 0,
          message: 'Failed to learn from correction',
          error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
      }
    }
  };
